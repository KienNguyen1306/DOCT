https://sequelize.org/docs/v6/other-topics/migrations/

B1:
- npm install --save sequelize
- Tạo file connet.js kết nối database
const { Sequelize } = require('sequelize');
const sequelize = new Sequelize('store', 'root', null, {
    host: 'localhost',
    dialect: 'mysql',
    logging: false
})

const connectionDatabase = async () => {
    try {
        await sequelize.authenticate();
        console.log('Connection has been established successfully.');
    } catch (error) {
        console.error('Unable to connect to the database:', error);
    }
}
connectionDatabase()

==================================================================================
B2: Tạo model 
- npm install --save-dev sequelize-cli
cd đến thư mục sourecode
- npx sequelize-cli init
+ Nó sẽ tạo ra folder config,models,migrations,seeders

==================================================================================
B3:
- IN file config/config.json

{
  "development": {
    "username": "root",
    "password": null,
    "database": "database_development",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

==================================================================================
B4:
- npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

Nó sẽ tạo ra table User (Muốn Custom lại thì custom rồi vào file migrations cũng sữa lại)

************************
- IN file model User.js

'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class User extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      User.belongsTo(models.Role, { foreignKey: 'role_code', targetKey: 'code', as: 'roleData' })
    }
  }
  User.init({
    name: DataTypes.STRING,
    email: DataTypes.STRING,
    password: DataTypes.STRING,
    avatar: DataTypes.STRING,
    role_code: DataTypes.STRING,
    refresh_token: DataTypes.STRING
  }, {
    sequelize,
    modelName: 'User',
  });
  return User;
};

************************
- IN file migrations

'use strict';
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Users', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      name: { type: Sequelize.STRING },
      email: { type: Sequelize.STRING },
      password: { type: Sequelize.STRING },
      role_code: { type: Sequelize.STRING, defaultValue: 'R3' },
      avatar: { type: Sequelize.STRING },
      refresh_token: { type: Sequelize.STRING },
      createdAt: { allowNull: false, type: 'TIMESTAMP', defaultValue: Sequelize.literal('CURRENT_TIMESTAMP') },
      updatedAt: { allowNull: false, type: 'TIMESTAMP', defaultValue: Sequelize.literal('CURRENT_TIMESTAMP') },
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Users');
  }
};
==================================================================================
B5:
npx sequelize-cli db:migrate

B6: Thêm dữ liệu thủ công
-INSERT value vào database
- Creat file inser.txt in root
INSERT INTO Roles (code , value) VALUES ('R1', 'Admin');
INSERT INTO Roles (code , value) VALUES ('R2', 'Moderator');
INSERT INTO Roles (code , value) VALUES ('R3', 'User');

==================================================================================

B6:- npm i -D @bable/core @bable/preset-env @bable/node

- Create .babelrc in root
- IN file .babelrc
{
"presets":["@babel/preset-env"]
}

- IN file package.json
"scripts":{
	"dev":nodemon --exec babel-node index.js
}

B7:
- Create folder services
- Create file auth.js in services

import db from '../models'



export const register = ({ email, password }) => new Promise(async (resolve, reject) => {
    try {
        const response = await db.User.findOrCreate({
            where: { email },
            defaults: {
                email,
                password: hashPassword(password)
            }
        })
        const accessToken = response[1]
            ? jwt.sign({ id: response[0].id, email: response[0].email, role_code: response[0].role_code }, process.env.JWT_SECRET, { expiresIn: '5s' })
            : null
        // JWT_SECRET_REFRESH_TOKEN
        const refreshToken = response[1]
            ? jwt.sign({ id: response[0].id }, process.env.JWT_SECRET_REFRESH_TOKEN, { expiresIn: '15d' })
            : null
        resolve({
            err: response[1] ? 0 : 1,
            mes: response[1] ? 'Register is successfully' : 'Email is used',
            'access_token': accessToken ? `Bearer ${accessToken}` : accessToken,
            'refresh_token': refreshToken
        })
        if (refreshToken) {
            await db.User.update({
                refresh_token: refreshToken
            }, {
                where: { id: response[0].id }
            })
        }
    } catch (error) {
        reject(error)
    }
})